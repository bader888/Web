[1]
 controller actions can return various types of results, ultimately affecting the HTTP response sent to the client. The
 The choice of return type depends on what you need to communicate to the client about the result of the operation performed by the action method.

we can return data from the controller action method in three different ways. They are as follows:
1-Primitive or Complex Types: 
2-IActionResult:
3-ActionResult<T>:
4-Specific Result Types:
5-Void:
6-Task<IActionResult> or Task<ActionResult<T>>:

examples:
Returning String from ASP.NET Core Web API Controller Action Method:
 [HttpGet("Name")]
 public string GetName()
 {
    return "Return from GetName";
 }


Returning Complex Type
[HttpGet("Details")]
public Employee GetEmployeeDetails()
{
    return new Employee()
    {
        Id = 1001,
        Name = "Anurag",
        Age = 28,
        City = "Mumbai",
        Gender = "Male",
        Department = "IT"
    };
}


Returning List<T>
[HttpGet("All")]
public List<Employee> GetAllEmployee()
{
    return new List<Employee>()
            {
                new Employee(){ Id = 1001, Name = "Anurag", Age = 28, City = "Mumbai", Gender = "Male", Department = "IT" },
                new Employee(){ Id = 1002, Name = "Pranaya", Age = 28, City = "Delhi", Gender = "Male", Department = "IT" },
                new Employee(){ Id = 1003, Name = "Priyanka", Age = 27, City = "BBSR", Gender = "Female", Department = "HR"},
            };
}



IActionResult Return Type:
This is useful when your action method needs to return different HTTP responses based on the outcome of the operation

ActionResult<T> Return Type:
ActionResult<T> extends IActionResult by allowing you to return either a response type that implements IActionResult or return a specific type T. 

Void Return Type:
 // Returns a 204 No Content response

Task<IActionResult> Return Type:
For asynchronous operations

[2] - When should you use which return type in ASP.NET Core?
Use IActionResult or ActionResult<T> for actions that might return different types of responses.
Return specific result types when the response is known and fixed.
Use primitive or complex types for simple data-returning actions.
Return void or Task for actions that do not need to return data.
Use Task<IActionResult> or Task<ActionResult<T>> for asynchronous operations needing flexibility in response types.